// src/pages/posts.tsx
import React from "react";
import { graphql } from "gatsby";
import Layout from "../components/Layout/Layout";
import PostCardGrid from "../layouts/PostCardGrid";
import { IGatsbyImageData } from "gatsby-plugin-image";
import SinglePageBaseGrid from "../layouts/SinglePageLayout/SinglePageBaseGrid";
interface Props {
  cardTitle?: string;
  subtitle?: string;
}
const Test: React.FC<Props> = (props: Props) => {
  return (
    <Layout>
      <SinglePageBaseGrid
        args={{
          singlePage: {
            title:
              "5 Reasons You Don’t Want to Miss Cassandra Forward | DataStax",
            reading_time: 2,
            wallabag_created_at: "2023-03-21T18:11:23.000Z",
            published_by: "['Mark Stone']",
            url: "https://www.datastax.com/blog/cassandraforward?utm_source=thenewstack&utm_medium=website",
            content:
              '<div class="row"><div class="col-lg-6 styles_post__info__JlcbM">March 8, 2023<p>Cassandra is a reliable distributed database management system designed to handle massive amounts of data, however its project and community are still ramping up. Attend Cassandra Forward, a two-hour event, and we\'re confident you\'ll recognize Cassandra as the ideal platform for your next-generation applications.</p></div></div><hr /><div class="row"><div class="col-lg-4">Authored by<div class="styles_newsletter__pxbHA"><h4>Sign up for our Developer Newsletter</h4><p>Get the latest articles on all things data delivered straight to your inbox.</p><form class="row align-items-end no-gutters" action="action">\n<div class="col styles_input__MYo8P styles_input__right_icon__4CCJt mb-0"><label class="styles_label__oJhzg" for="newsletter.email">Email Address</label></div>\n</form></div></div></div>',
          },

          thumbnail: {
            layout: "constrained",
            backgroundColor: "#382858",
            images: {
              fallback: {
                src: "/static/c9a775fe14a5f58876a03c5587454932/4a49b/49d9079034d98c3a6cbddb7ae7e5387c.jpg",
                srcSet:
                  "/static/c9a775fe14a5f58876a03c5587454932/b4dad/49d9079034d98c3a6cbddb7ae7e5387c.jpg 320w,\n/static/c9a775fe14a5f58876a03c5587454932/3440d/49d9079034d98c3a6cbddb7ae7e5387c.jpg 640w,\n/static/c9a775fe14a5f58876a03c5587454932/4a49b/49d9079034d98c3a6cbddb7ae7e5387c.jpg 1280w",
                sizes: "(min-width: 1280px) 1280px, 100vw",
              },
              sources: [
                {
                  srcSet:
                    "/static/c9a775fe14a5f58876a03c5587454932/c0bcc/49d9079034d98c3a6cbddb7ae7e5387c.webp 320w,\n/static/c9a775fe14a5f58876a03c5587454932/17574/49d9079034d98c3a6cbddb7ae7e5387c.webp 640w,\n/static/c9a775fe14a5f58876a03c5587454932/71d4d/49d9079034d98c3a6cbddb7ae7e5387c.webp 1280w",
                  type: "image/webp",
                  sizes: "(min-width: 1280px) 1280px, 100vw",
                },
              ],
            },
            width: 1280,
            height: 720,
          },
          articles: [
            {
              content:
                '<p> sponsored this post.</p><p>Apache Cassandra is becoming the best database for handling JSON documents. If you’re a Cassandra developer who finds that statement provocative, read on.</p><p>In a previous article, we discussed <a href="https://thenewstack.io/api-magic-building-data-services-with-apache-cassandra/" class="local-link">using data APIs and data modeling</a> to mold Cassandra into a developer experience more idiomatic to the way developers think, thus improving developer productivity while preserving reasonable database performance and scale. It’s a great hypothesis and one that needs to be tested in the context of a particular developer idiom and developer community.</p><p><a href="https://mongoosejs.com/" class="ext-link" rel="external">Mongoose</a>, an object data mapping library usually used with the MongoDB driver, is an open source project with a significant community of JavaScript developers around it. At the <a href="https://stargate.io/" class="ext-link" rel="external">Stargate project</a>, the open source API data gateway designed to work with Cassandra, we’ve partnered with Mongoose, and we’re working on an upcoming <a href="https://github.com/stargate/jsonapi" class="ext-link" rel="external">JSON API</a> that will be released together with a <a href="https://github.com/stargate/stargate-mongoose" class="ext-link" rel="external">version of Mongoose</a> that will work through that JSON API to connect to Cassandra. This creates an end-to-end stack for Mongoose developers that is fully open source. It’s game-changing for Mongoose developers, and opens an important new chapter for Cassandra.</p><p>In this article, I’ll discuss how to provide a developer-friendly JSON idiom using Cassandra together with Stargate, and how we’re working to do just that for Mongoose developers.</p><h2>The Goldilocks of JS Communities</h2><p>In October 2022, we released a new version of Stargate. With the new <a href="https://stargate.io/2022/10/26/stargate-v2-ga.html" class="ext-link" rel="external">Version 2</a>, individual APIs are no longer embedded in the core Stargate coordinator code, but instead separated out into individual services. This improves Stargate’s operational efficiency; individual API services can now be deployed and scaled independently. This also makes new API services easier to develop. As long as they abide by the service boundary, these services can be developed in parallel with and independent of core Stargate development work.</p><p>We then looked for a truly idiomatic experience we could deliver to developers. With 18 million developers, JavaScript is the world’s most popular programming language, and JSON is the standard way that JavaScript developers structure data. However, 18 million people is not a community; it is many communities. We needed the “Goldilocks” of JavaScript communities — big enough to be significant, but small enough to be focused. We found the right community built around Mongoose, an object data mapper library used with applications that connect to MongoDB. Mongoose has several important characteristics:</p><ul><li aria-level="1">It’s JavaScript-centric</li>\n<li aria-level="1">It enjoys broad adoption, with roughly 2 million GitHub repositories listing Mongoose as a dependency</li>\n<li aria-level="1">Mongoose creator <a href="https://www.linkedin.com/in/valeri-karpov-64b48138/" class="ext-link" rel="external">Valeri Karpov</a>’s active leadership provides a clear focus</li>\n<li aria-level="1">It’s an open source project that has lacked an open source database since MongoDB’s decision to move to a shared source model with its <a href="https://www.mongodb.com/licensing/server-side-public-license/faq" class="ext-link" rel="external">Server Side Public License</a></li>\n</ul><p>Developers don’t really interact directly with a database so much as a data model. In Stargate’s original Document API, the API handles JSON by making it look like a traditional Cassandra table. This puts a burden on JSON-oriented developers to think in terms of Cassandra data structures, and puts a burden on Cassandra’s row-oriented indexing logic because a JSON document gets spread across multiple rows.</p><p>Our new JSON API departs from this data model, and instead relies on a data model we call “super shredding.” You can learn more about super shredding at Aaron Morton’s talk at <a href="https://dtsx.io/3YLMOQV" class="ext-link" rel="external">Cassandra Forward</a>, a free digital event on March 14. In short, we take advantage of Cassandra’s wide-column nature to store one document per row, knowing that a Cassandra row can handle even very large documents. We also have a set of columns in that row that are explicitly for storing standard metadata characteristics of a JSON document. Now we have something more easily indexable, as well as a means of preserving and retrieving metadata.</p><p>We will then front this data model with our new JSON API, using the same <a href="https://www.npmjs.com/package/mquery" class="ext-link" rel="external">mQuery</a> specification that Mongoose uses as our guiding requirement for which calls the API needs to support. When complete, this should enable any of the more than 2 million Mongoose-dependent applications to run against open source Cassandra or DataStax’s hosted Cassandra service, <a href="https://dtsx.io/3ypXtG5" class="ext-link" rel="external">Astra DB</a>, with just a configuration change.</p><p>With Mongoose and the new JSON API, we’ll provide a fully idiomatic experience to JSON-oriented JavaScript developers, giving them the <a href="https://thenewstack.io/an-apache-cassandra-breakthrough-acid-transactions-at-scale/" class="local-link">scale and performance of Cassandra</a> underpinning an authentic JSON data model.</p><p>Mongoose creator Karpov will also speak at the Cassandra Forward event, demonstrating a simple e-commerce application that uses the Stargate version of Mongoose, open source Stargate and the DataStax Enterprise (DSE) version of Cassandra. You’ll be able to download the working code for this application and the supporting platform pieces from <a href="https://github.com/stargate/stargate-mongoose" class="ext-link" rel="external">GitHub</a>. While we have enough code to run this application, we are not yet code complete. For example, we run against DSE right now because we need <a href="https://dtsx.io/3ZRhl0w" class="ext-link" rel="external">storage-attached indexing</a> (SAI), which works with DSE and is planned for release in Cassandra 5.0 later this year.</p><h2>Contributing Back to Cassandra</h2><p>Cassandra isn’t a static piece of software; it’s a vibrant and evolving open source project. So we are also continuing a longstanding Cassandra tradition of using <a href="https://thenewstack.io/boost-cassandra-data-models-with-storage-attached-indexing/" class="local-link">features like SAI</a> that emerge client-side to foster changes on the database side. Similarly, Stargate’s Mongoose work has prompted a set of proposals for Cassandra around global sort and advanced query filtering that will not only make Stargate’s JSON API and Mongoose client better, but will add powerful new features to Cassandra Query Language. This is a great reminder that data engineers and application developers are not two different communities, but complementary cohorts of the extended Cassandra community.</p><p>And JSON is just the first step. Essentially, what we will have done is to take the building blocks of Cassandra, Stargate and a reasonably efficient Cassandra data model and build a document database that you interact with through a JSON API. In other words, we’ve used super shredding to create a purpose-built database that better serves the community of Mongoose developers.</p><p>With the modular architecture of <a href="https://devm.io/api/stargate-apache-cassandra" class="ext-link" rel="external">Stargate v2</a>, and the proof point of Mongoose for the idiomatic approach, we are ready to take on new developer communities that organize around a particular software development idiom. The process by which we’ve harnessed Cassandra for Mongoose is repeatable — and it’s one that we will repeat. In so doing, we dramatically expand the number of developers and use cases that Cassandra can address, which is the sort of goal worthy of an open source project.</p><p><a href="https://dtsx.io/41TOMBj" class="ext-link" rel="external"><em>Learn more about DataStax</em></a><em>.</em></p><p>GroupCreated with Sketch.</p>',
              domain_name: "thenewstack.io",
              http_status: 200,
              id: "19166",
              language: "en_US",
              last_sourced_from_wallabag: "2023-04-03T03:31:52.382Z",
              mimetype: "text/html; charset=UTF-8",
              preview_picture:
                "https://cdn.thenewstack.io/media/2023/03/fce624c8-mongoose.jpg",
              published_at: "2023-03-10T14:15:37.000Z",
              published_by: "['Mark Stone']",
              reading_time: 5,
              tags: ["mongo", "api", "cassandra", "javascript"],
              title:
                "Mongoose: Bringing JSON-Oriented Developers to Apache Cassandra",
              updated_at: "2023-04-03T03:31:52.382Z",
              url: "https://thenewstack.io/mongoose-bringing-json-oriented-developers-to-apache-cassandra/",
              user_email: "rahul.singh@anant.us",
              user_id: "1",
              user_name: "graphroot",
              wallabag_created_at: "2023-03-21T18:06:37.000Z",
              wallabag_is_archived: true,
              wallabag_updated_at: "2023-03-21T18:06:49.000Z",
            },
            {
              content:
                '<p> sponsored this post.</p><p>Apache Cassandra is becoming the best database for handling JSON documents. If you’re a Cassandra developer who finds that statement provocative, read on.</p><p>In a previous article, we discussed <a href="https://thenewstack.io/api-magic-building-data-services-with-apache-cassandra/" class="local-link">using data APIs and data modeling</a> to mold Cassandra into a developer experience more idiomatic to the way developers think, thus improving developer productivity while preserving reasonable database performance and scale. It’s a great hypothesis and one that needs to be tested in the context of a particular developer idiom and developer community.</p><p><a href="https://mongoosejs.com/" class="ext-link" rel="external">Mongoose</a>, an object data mapping library usually used with the MongoDB driver, is an open source project with a significant community of JavaScript developers around it. At the <a href="https://stargate.io/" class="ext-link" rel="external">Stargate project</a>, the open source API data gateway designed to work with Cassandra, we’ve partnered with Mongoose, and we’re working on an upcoming <a href="https://github.com/stargate/jsonapi" class="ext-link" rel="external">JSON API</a> that will be released together with a <a href="https://github.com/stargate/stargate-mongoose" class="ext-link" rel="external">version of Mongoose</a> that will work through that JSON API to connect to Cassandra. This creates an end-to-end stack for Mongoose developers that is fully open source. It’s game-changing for Mongoose developers, and opens an important new chapter for Cassandra.</p><p>In this article, I’ll discuss how to provide a developer-friendly JSON idiom using Cassandra together with Stargate, and how we’re working to do just that for Mongoose developers.</p><h2>The Goldilocks of JS Communities</h2><p>In October 2022, we released a new version of Stargate. With the new <a href="https://stargate.io/2022/10/26/stargate-v2-ga.html" class="ext-link" rel="external">Version 2</a>, individual APIs are no longer embedded in the core Stargate coordinator code, but instead separated out into individual services. This improves Stargate’s operational efficiency; individual API services can now be deployed and scaled independently. This also makes new API services easier to develop. As long as they abide by the service boundary, these services can be developed in parallel with and independent of core Stargate development work.</p><p>We then looked for a truly idiomatic experience we could deliver to developers. With 18 million developers, JavaScript is the world’s most popular programming language, and JSON is the standard way that JavaScript developers structure data. However, 18 million people is not a community; it is many communities. We needed the “Goldilocks” of JavaScript communities — big enough to be significant, but small enough to be focused. We found the right community built around Mongoose, an object data mapper library used with applications that connect to MongoDB. Mongoose has several important characteristics:</p><ul><li aria-level="1">It’s JavaScript-centric</li>\n<li aria-level="1">It enjoys broad adoption, with roughly 2 million GitHub repositories listing Mongoose as a dependency</li>\n<li aria-level="1">Mongoose creator <a href="https://www.linkedin.com/in/valeri-karpov-64b48138/" class="ext-link" rel="external">Valeri Karpov</a>’s active leadership provides a clear focus</li>\n<li aria-level="1">It’s an open source project that has lacked an open source database since MongoDB’s decision to move to a shared source model with its <a href="https://www.mongodb.com/licensing/server-side-public-license/faq" class="ext-link" rel="external">Server Side Public License</a></li>\n</ul><p>Developers don’t really interact directly with a database so much as a data model. In Stargate’s original Document API, the API handles JSON by making it look like a traditional Cassandra table. This puts a burden on JSON-oriented developers to think in terms of Cassandra data structures, and puts a burden on Cassandra’s row-oriented indexing logic because a JSON document gets spread across multiple rows.</p><p>Our new JSON API departs from this data model, and instead relies on a data model we call “super shredding.” You can learn more about super shredding at Aaron Morton’s talk at <a href="https://dtsx.io/3YLMOQV" class="ext-link" rel="external">Cassandra Forward</a>, a free digital event on March 14. In short, we take advantage of Cassandra’s wide-column nature to store one document per row, knowing that a Cassandra row can handle even very large documents. We also have a set of columns in that row that are explicitly for storing standard metadata characteristics of a JSON document. Now we have something more easily indexable, as well as a means of preserving and retrieving metadata.</p><p>We will then front this data model with our new JSON API, using the same <a href="https://www.npmjs.com/package/mquery" class="ext-link" rel="external">mQuery</a> specification that Mongoose uses as our guiding requirement for which calls the API needs to support. When complete, this should enable any of the more than 2 million Mongoose-dependent applications to run against open source Cassandra or DataStax’s hosted Cassandra service, <a href="https://dtsx.io/3ypXtG5" class="ext-link" rel="external">Astra DB</a>, with just a configuration change.</p><p>With Mongoose and the new JSON API, we’ll provide a fully idiomatic experience to JSON-oriented JavaScript developers, giving them the <a href="https://thenewstack.io/an-apache-cassandra-breakthrough-acid-transactions-at-scale/" class="local-link">scale and performance of Cassandra</a> underpinning an authentic JSON data model.</p><p>Mongoose creator Karpov will also speak at the Cassandra Forward event, demonstrating a simple e-commerce application that uses the Stargate version of Mongoose, open source Stargate and the DataStax Enterprise (DSE) version of Cassandra. You’ll be able to download the working code for this application and the supporting platform pieces from <a href="https://github.com/stargate/stargate-mongoose" class="ext-link" rel="external">GitHub</a>. While we have enough code to run this application, we are not yet code complete. For example, we run against DSE right now because we need <a href="https://dtsx.io/3ZRhl0w" class="ext-link" rel="external">storage-attached indexing</a> (SAI), which works with DSE and is planned for release in Cassandra 5.0 later this year.</p><h2>Contributing Back to Cassandra</h2><p>Cassandra isn’t a static piece of software; it’s a vibrant and evolving open source project. So we are also continuing a longstanding Cassandra tradition of using <a href="https://thenewstack.io/boost-cassandra-data-models-with-storage-attached-indexing/" class="local-link">features like SAI</a> that emerge client-side to foster changes on the database side. Similarly, Stargate’s Mongoose work has prompted a set of proposals for Cassandra around global sort and advanced query filtering that will not only make Stargate’s JSON API and Mongoose client better, but will add powerful new features to Cassandra Query Language. This is a great reminder that data engineers and application developers are not two different communities, but complementary cohorts of the extended Cassandra community.</p><p>And JSON is just the first step. Essentially, what we will have done is to take the building blocks of Cassandra, Stargate and a reasonably efficient Cassandra data model and build a document database that you interact with through a JSON API. In other words, we’ve used super shredding to create a purpose-built database that better serves the community of Mongoose developers.</p><p>With the modular architecture of <a href="https://devm.io/api/stargate-apache-cassandra" class="ext-link" rel="external">Stargate v2</a>, and the proof point of Mongoose for the idiomatic approach, we are ready to take on new developer communities that organize around a particular software development idiom. The process by which we’ve harnessed Cassandra for Mongoose is repeatable — and it’s one that we will repeat. In so doing, we dramatically expand the number of developers and use cases that Cassandra can address, which is the sort of goal worthy of an open source project.</p><p><a href="https://dtsx.io/41TOMBj" class="ext-link" rel="external"><em>Learn more about DataStax</em></a><em>.</em></p><p>GroupCreated with Sketch.</p>',
              id: "19166",
              preview_picture:
                "https://cdn.thenewstack.io/media/2023/03/fce624c8-mongoose.jpg",
              published_at: "2023-03-10T14:15:37.000Z",
              published_by: "['Mark Stone']",
              reading_time: 5,
              tags: ["mongo", "api", "cassandra", "javascript"],
              title:
                "Mongoose: Bringing JSON-Oriented Developers to Apache Cassandra",
              url: "https://thenewstack.io/mongoose-bringing-json-oriented-developers-to-apache-cassandra/",
              wallabag_created_at: "2023-03-21T18:06:37.000Z",
            },
          ],
          title: "title",
        }}
      />
    </Layout>
  );
};

export default Test;
